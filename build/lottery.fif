"Asm.fif" include
// automatically generated from `/Users/prajjawalkhandelwal/Library/Application Support/toncli/func-libs/error_codes.func` `/Users/prajjawalkhandelwal/Library/Application Support/toncli/func-libs/math.func` `/Users/prajjawalkhandelwal/Library/Application Support/toncli/func-libs/stdlib.func` `/Users/prajjawalkhandelwal/Prajjawal/ton-lottery-ecvrf/func/code.func` 
PROGRAM{
  DECLPROC power
  DECLPROC sqrt
  DECLPROC avg
  DECLPROC exp
  DECLPROC log2
  DECLPROC remove_old_orders
  DECLPROC pack_state
  DECLPROC unpack_state
  DECLPROC unpack_stats
  DECLPROC pack_order
  DECLPROC unpack_order
  DECLPROC send_tons
  DECLPROC recv_internal
  113333 DECLMETHOD get_order_seqno
  80328 DECLMETHOD get_number_of_wins
  109088 DECLMETHOD get_incoming_amount
  113619 DECLMETHOD get_outgoing_amount
  67442 DECLMETHOD get_orders
  112663 DECLMETHOD get_pubkey
  104128 DECLMETHOD balance
  90230 DECLMETHOD get_random
  DECLGLOBVAR rand_no
  DECLGLOBVAR rand_updated
  power PROCREF:<{
    //  x exponent
    OVER	//  x exponent x
    0 EQINT	//  x exponent _3
    IFJMP:<{	//  x exponent
      2DROP	// 
      0 PUSHINT	//  _4=0
    }>	//  x exponent
    DUP	//  x exponent exponent
    0 EQINT	//  x exponent _6
    IFJMP:<{	//  x exponent
      2DROP	// 
      1 PUSHINT	//  _7=1
    }>	//  x exponent
    OVER	//  x counter result
    WHILE:<{
      OVER	//  x counter result counter
      1 GTINT	//  x counter result _11
    }>DO<{	//  x counter result
      s2 PUSH	//  x counter result x
      MUL	//  x counter result
      SWAP	//  x result counter
      DEC	//  x result counter
      SWAP	//  x counter result
    }>	//  x counter result
    2 1 BLKDROP2	//  result
  }>
  sqrt PROCREF:<{
    //  x
    DUP	//  x x
    0 EQINT	//  x _2
    IFJMP:<{	//  x
      DROP	// 
      0 PUSHINT	//  _3=0
    }>	//  x
    DUP	//  x x
    4 LESSINT	//  x _5
    IFJMP:<{	//  x
      DROP	// 
      1 PUSHINT	//  _6=1
    }>	//  x
    DUP	//  x x
    INC	//  x _9
    1 RSHIFT#	//  x z
    OVER	//  x z y
    WHILE:<{
      2DUP	//  x z y z y
      LESS	//  x z y _13
    }>DO<{	//  x z y
      DROP	//  x z
      s0 s1 s0 PUSH3	//  x z y x z
      DIV	//  x z y _14
      ROT	//  x y _14 z
      ADD	//  x y _15
      1 RSHIFT#	//  x y z
      SWAP	//  x z y
    }>	//  x z y
    2 1 BLKDROP2	//  y
  }>
  avg PROCREF:<{
    //  x y
    ADD	//  _2
    1 RSHIFT#	//  _4
  }>
  exp PROCREF:<{
    //  x
    DUP	//  x x
    -1 GTINT	//  x _2
    IF:<{	//  x
      POW2	//  _3
    }>ELSE<{	//  x
      1 PUSHINT	//  x _6=1
      SWAP	//  _6=1 x
      NEGATE	//  _6=1 _8
      RSHIFT	//  _3
    }>
  }>
  log2 PROCREF:<{
    //  x
    0 PUSHINT	//  x n=0
    7 PUSHPOW2	//  x n=0 _3=128
    exp INLINECALLDICT	//  x n=0 _4
    s2 s(-1) PUXC	//  x n=0 x _4
    GEQ	//  x n=0 _5
    IF:<{	//  x n=0
      DROP	//  x
      128 RSHIFT#	//  x
      7 PUSHPOW2	//  x n
    }>	//  x n
    64 PUSHINT	//  x n _10=64
    exp INLINECALLDICT	//  x n _11
    s2 s(-1) PUXC	//  x n x _11
    GEQ	//  x n _12
    IF:<{	//  x n
      SWAP	//  n x
      64 RSHIFT#	//  n x
      SWAP	//  x n
      64 ADDCONST	//  x n
    }>	//  x n
    32 PUSHINT	//  x n _17=32
    exp INLINECALLDICT	//  x n _18
    s2 s(-1) PUXC	//  x n x _18
    GEQ	//  x n _19
    IF:<{	//  x n
      SWAP	//  n x
      32 RSHIFT#	//  n x
      SWAP	//  x n
      32 ADDCONST	//  x n
    }>	//  x n
    16 PUSHINT	//  x n _24=16
    exp INLINECALLDICT	//  x n _25
    s2 s(-1) PUXC	//  x n x _25
    GEQ	//  x n _26
    IF:<{	//  x n
      SWAP	//  n x
      16 RSHIFT#	//  n x
      SWAP	//  x n
      16 ADDCONST	//  x n
    }>	//  x n
    8 PUSHINT	//  x n _31=8
    exp INLINECALLDICT	//  x n _32
    s2 s(-1) PUXC	//  x n x _32
    GEQ	//  x n _33
    IF:<{	//  x n
      SWAP	//  n x
      8 RSHIFT#	//  n x
      SWAP	//  x n
      8 ADDCONST	//  x n
    }>	//  x n
    4 PUSHINT	//  x n _38=4
    exp INLINECALLDICT	//  x n _39
    s2 s(-1) PUXC	//  x n x _39
    GEQ	//  x n _40
    IF:<{	//  x n
      SWAP	//  n x
      4 RSHIFT#	//  n x
      SWAP	//  x n
      4 ADDCONST	//  x n
    }>	//  x n
    2 PUSHINT	//  x n _45=2
    exp INLINECALLDICT	//  x n _46
    s2 s(-1) PUXC	//  x n x _46
    GEQ	//  x n _47
    IF:<{	//  x n
      SWAP	//  n x
      2 RSHIFT#	//  n x
      SWAP	//  x n
      2 ADDCONST	//  x n
    }>	//  x n
    1 PUSHINT	//  x n _52=1
    exp INLINECALLDICT	//  x n _53
    s1 s2 XCHG	//  n x _53
    GEQ	//  n _54
    IF:<{	//  n
      INC	//  n
    }>	//  n
  }>
  remove_old_orders PROC:<{
    //  orders o_seqno
    -20 ADDCONST	//  orders cursor
    UNTIL:<{
      OVER
      64 PUSHINT	//  orders cursor orders _7=64
      DICTUGETPREV
      NULLSWAPIFNOT2	//  orders _14 _13 _15
      s2 POP	//  orders f cursor
      OVER	//  orders f cursor f
      IF:<{	//  orders f cursor
        s0 s2 PUXC
        64 PUSHINT	//  cursor f cursor orders _10=64
        DICTUDELGET
        NULLSWAPIFNOT	//  cursor f _18 _19 _20
        2DROP	//  cursor f orders
        s0 s2 XCHG	//  orders f cursor
      }>	//  orders f cursor
      SWAP	//  orders cursor f
      NOT	//  orders cursor _12
    }>	//  orders cursor
    DROP	//  orders
  }>
  pack_state PROCINLINE:<{
    //  o_seqno n_wins in_amount out_amount hash owner1 owner2 ecvrf orders
    NEWC	//  o_seqno n_wins in_amount out_amount hash owner1 owner2 ecvrf orders _9
    s0 s4 XCHG2	//  o_seqno n_wins in_amount out_amount hash orders owner2 ecvrf _9 owner1
    STSLICER	//  o_seqno n_wins in_amount out_amount hash orders owner2 ecvrf _10
    ROT	//  o_seqno n_wins in_amount out_amount hash orders ecvrf _10 owner2
    STSLICER	//  o_seqno n_wins in_amount out_amount hash orders ecvrf _11
    SWAP	//  o_seqno n_wins in_amount out_amount hash orders _11 ecvrf
    STSLICER	//  o_seqno n_wins in_amount out_amount hash orders _12
    ENDC	//  o_seqno n_wins in_amount out_amount hash orders _13
    s0 s6 XCHG
    NEWC	//  _13 n_wins in_amount out_amount hash orders o_seqno _14
    64 STU	//  _13 n_wins in_amount out_amount hash orders _16
    s1 s5 XCHG	//  _13 orders in_amount out_amount hash n_wins _16
    64 STU	//  _13 orders in_amount out_amount hash _18
    s1 s3 XCHG	//  _13 orders hash out_amount in_amount _18
    256 STU	//  _13 orders hash out_amount _20
    256 STU	//  _13 orders hash _22
    256 STU	//  _13 orders _24
    STDICT	//  _13 _25
    STREF	//  _26
    ENDC	//  _27
  }>
  unpack_state PROCINLINE:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  ds
    896 PUSHINT	//  ds _5=896
    LDSLICEX	//  stats ds
    LDDICT	//  stats orders ds
    PLDREF	//  stats orders _11
    CTOS	//  stats orders adrs
    LDMSGADDR	//  stats orders _14 adrs
    LDMSGADDR	//  stats orders _14 _16 adrs
    LDMSGADDR	//  stats orders _14 _16 _34 _33
    DROP	//  unpacked unpacked unpacked unpacked unpacked
  }>
  unpack_stats PROCINLINE:<{
    //  stats
    64 LDU	//  _2 stats
    64 LDU	//  _2 _5 stats
    256 LDU	//  _2 _5 _8 stats
    256 LDU	//  _2 _5 _8 _11 stats
    256 LDU	//  _2 _5 _8 _11 _31 _30
    DROP	//  unpacked unpacked unpacked unpacked unpacked
  }>
  pack_order PROCINLINE:<{
    //  id status timestamp amount address
    s0 s4 XCHG
    NEWC	//  address status timestamp amount id _5
    64 STU	//  address status timestamp amount _7
    s1 s3 XCHG	//  address amount timestamp status _7
    4 STU	//  address amount timestamp _9
    64 STU	//  address amount _11
    SWAP	//  address _11 amount
    STVARUINT16	//  address _12
    SWAP	//  _12 address
    STSLICER	//  _13
  }>
  unpack_order PROCREF:<{
    //  order
    64 LDU	//  _1 order
    4 LDU	//  _1 _4 order
    64 LDU	//  _1 _4 _7 order
    LDVARUINT16	//  _1 _4 _7 _10 order
    LDMSGADDR	//  _1 _4 _7 _10 _23 _22
    DROP	//  _1 _4 _7 _10 _12
  }>
  send_tons PROCINLINE:<{
    //  address amount mode
    0 PUSHINT	//  address amount mode _4=0
    24 PUSHINT	//  address amount mode _4=0 _5=24
    NEWC	//  address amount mode _4=0 _5=24 _6
    6 STU	//  address amount mode _4=0 _8
    s0 s4 XCHG2	//  _4=0 amount mode _8 address
    STSLICER	//  _4=0 amount mode _9
    ROT	//  _4=0 mode _9 amount
    STVARUINT16	//  _4=0 mode _10
    s1 s2 XCHG	//  mode _4=0 _10
    107 STU	//  mode msg
    ENDC	//  mode _25
    SWAP	//  _25 mode
    SENDRAWMSG
  }>
  recv_internal PROC:<{
    //  msg_value in_msg_full in_msg_body
    SWAP	//  msg_value in_msg_body in_msg_full
    CTOS	//  msg_value in_msg_body cs
    DUP	//  msg_value in_msg_body cs cs
    HASHSU	//  msg_value in_msg_body cs msg_hash
    SWAP	//  msg_value in_msg_body msg_hash cs
    4 LDU	//  msg_value in_msg_body msg_hash flags cs
    SWAP
    1 PUSHINT	//  msg_value in_msg_body msg_hash cs flags _11=1
    AND	//  msg_value in_msg_body msg_hash cs _12
    IFJMP:<{	//  msg_value in_msg_body msg_hash cs
      4 BLKDROP	// 
    }>	//  msg_value in_msg_body msg_hash cs
    LDMSGADDR	//  msg_value in_msg_body msg_hash _139 _138
    DROP	//  msg_value in_msg_body msg_hash sender
    unpack_state INLINECALLDICT	//  msg_value in_msg_body msg_hash sender stats orders owner1 owner2 ecvrf
    s5 s2 PUSH2	//  msg_value in_msg_body msg_hash sender stats orders owner1 owner2 ecvrf sender owner1
    SDEQ	//  msg_value in_msg_body msg_hash sender stats orders owner1 owner2 ecvrf _22
    s6 s2 PUSH2	//  msg_value in_msg_body msg_hash sender stats orders owner1 owner2 ecvrf _22 sender owner2
    SDEQ	//  msg_value in_msg_body msg_hash sender stats orders owner1 owner2 ecvrf _22 _23
    OR	//  msg_value in_msg_body msg_hash sender stats orders owner1 owner2 ecvrf _24
    IFJMP:<{	//  msg_value in_msg_body msg_hash sender stats orders owner1 owner2 ecvrf
      9 BLKDROP	// 
    }>	//  msg_value in_msg_body msg_hash sender stats orders owner1 owner2 ecvrf
    s7 PUSH	//  msg_value msg_body msg_hash sender stats orders owner1 owner2 ecvrf in_msg_body
    32 LDU	//  msg_value msg_body msg_hash sender stats orders owner1 owner2 ecvrf op in_msg_body
    110947496 PUSHINT	//  msg_value msg_body msg_hash sender stats orders owner1 owner2 ecvrf op in_msg_body _30=110947496
    s8 s3 XCPU	//  msg_value msg_body msg_hash _30=110947496 stats orders owner1 owner2 ecvrf op in_msg_body sender ecvrf
    SDEQ	//  msg_value msg_body msg_hash _30=110947496 stats orders owner1 owner2 ecvrf op in_msg_body _31
    s1 s8 XCHG	//  msg_value msg_body msg_hash in_msg_body stats orders owner1 owner2 ecvrf op _30=110947496 _31
    AND	//  msg_value msg_body msg_hash in_msg_body stats orders owner1 owner2 ecvrf op _32
    EQUAL	//  msg_value msg_body msg_hash in_msg_body stats orders owner1 owner2 ecvrf _33
    IFJMP:<{	//  msg_value msg_body msg_hash in_msg_body stats orders owner1 owner2 ecvrf
      s7 s8 XCHG
      8 BLKDROP	//  msg_body
      256 LDU	//  _148 _147
      DROP	//  vrfrand
      10 PUSHINT	//  vrfrand _38=10
      MOD	//  _39
      rand_no SETGLOB
      -1 PUSHINT	//  _40=-1
      rand_updated SETGLOB
    }>	//  msg_value msg_body msg_hash in_msg_body stats orders owner1 owner2 ecvrf
    s7 POP	//  msg_value ecvrf msg_hash in_msg_body stats orders owner1 owner2
    s7 PUSH
    999999999 PUSHINT	//  msg_value ecvrf msg_hash in_msg_body stats orders owner1 owner2 msg_value _42=999999999
    GREATER	//  msg_value ecvrf msg_hash in_msg_body stats orders owner1 owner2 _43
    333 THROWIFNOT
    BALANCE
    FIRST	//  msg_value ecvrf msg_hash in_msg_body stats orders owner1 owner2 _46
    s8 PUSH	//  msg_value ecvrf msg_hash in_msg_body stats orders owner1 owner2 _46 msg_value
    1 LSHIFT#	//  msg_value ecvrf msg_hash in_msg_body stats orders owner1 owner2 _46 _48
    1000000000 PUSHINT	//  msg_value ecvrf msg_hash in_msg_body stats orders owner1 owner2 _46 _48 _49=1000000000
    ADD	//  msg_value ecvrf msg_hash in_msg_body stats orders owner1 owner2 _46 _50
    GREATER	//  msg_value ecvrf msg_hash in_msg_body stats orders owner1 owner2 _51
    666 THROWIFNOT
    rand_updated GETGLOB	//  msg_value ecvrf msg_hash in_msg_body stats orders owner1 owner2 _53
    0 EQINT	//  msg_value ecvrf msg_hash in_msg_body stats orders owner1 owner2 _55
    IF:<{	//  msg_value ecvrf msg_hash in_msg_body stats orders owner1 owner2
      10 PUSHINT	//  msg_value ecvrf msg_hash in_msg_body stats orders owner1 owner2 _56=10
      RAND	//  msg_value ecvrf msg_hash in_msg_body stats orders owner1 owner2 _57
      rand_no SETGLOB
    }>	//  msg_value ecvrf msg_hash in_msg_body stats orders owner1 owner2
    s0 s4 XCHG	//  msg_value ecvrf msg_hash owner2 stats orders owner1 in_msg_body
    LDMSGADDR	//  msg_value ecvrf msg_hash owner2 stats orders owner1 _60 in_msg_body
    LDVARUINT16	//  msg_value ecvrf msg_hash owner2 stats orders owner1 _60 _152 _151
    DROP	//  msg_value ecvrf msg_hash owner2 stats orders owner1 player o_amount
    BALANCE
    FIRST	//  msg_value ecvrf msg_hash owner2 stats orders owner1 player o_amount _64
    OVER	//  msg_value ecvrf msg_hash owner2 stats orders owner1 player o_amount _64 o_amount
    1 LSHIFT#	//  msg_value ecvrf msg_hash owner2 stats orders owner1 player o_amount _64 _66
    1000000000 PUSHINT	//  msg_value ecvrf msg_hash owner2 stats orders owner1 player o_amount _64 _66 _67=1000000000
    ADD	//  msg_value ecvrf msg_hash owner2 stats orders owner1 player o_amount _64 _68
    LESS	//  msg_value ecvrf msg_hash owner2 stats orders owner1 player o_amount _69
    IF:<{	//  msg_value ecvrf msg_hash owner2 stats orders owner1 player o_amount
      s1 s7 XCHG
      7 BLKDROP	//  msg_value player
      SWAP
      2 PUSHINT	//  player msg_value _70=2
      send_tons INLINECALLDICT
    }>ELSE<{	//  msg_value ecvrf msg_hash owner2 stats orders owner1 player o_amount
      s8 POP	//  o_amount ecvrf msg_hash owner2 stats orders owner1 player
      s0 s3 XCHG	//  o_amount ecvrf msg_hash owner2 player orders owner1 stats
      unpack_stats INLINECALLDICT	//  o_amount ecvrf msg_hash owner2 player orders owner1 o_seqno n_wins in_amount out_amount hash
      NOW	//  o_amount ecvrf msg_hash owner2 player orders owner1 o_seqno n_wins in_amount out_amount hash _78
      LTIME	//  o_amount ecvrf msg_hash owner2 player orders owner1 o_seqno n_wins in_amount out_amount hash _78 _79
      s0 s2 XCHG
      NEWC	//  o_amount ecvrf msg_hash owner2 player orders owner1 o_seqno n_wins in_amount out_amount _79 _78 hash _80
      256 STU	//  o_amount ecvrf msg_hash owner2 player orders owner1 o_seqno n_wins in_amount out_amount _79 _78 _82
      s1 s11 XCHG	//  o_amount ecvrf _78 owner2 player orders owner1 o_seqno n_wins in_amount out_amount _79 msg_hash _82
      256 STU	//  o_amount ecvrf _78 owner2 player orders owner1 o_seqno n_wins in_amount out_amount _79 _84
      64 STU	//  o_amount ecvrf _78 owner2 player orders owner1 o_seqno n_wins in_amount out_amount _86
      s1 s9 XCHG	//  o_amount ecvrf out_amount owner2 player orders owner1 o_seqno n_wins in_amount _78 _86
      64 STU	//  o_amount ecvrf out_amount owner2 player orders owner1 o_seqno n_wins in_amount _88
      ENDC	//  o_amount ecvrf out_amount owner2 player orders owner1 o_seqno n_wins in_amount _89
      HASHCU	//  o_amount ecvrf out_amount owner2 player orders owner1 o_seqno n_wins in_amount hash
      DUP	//  o_amount ecvrf out_amount owner2 player orders owner1 o_seqno n_wins in_amount hash hash
      ADDRAND
      rand_no GETGLOB	//  o_amount ecvrf out_amount owner2 player orders owner1 o_seqno n_wins in_amount hash _92
      3 GTINT	//  o_amount ecvrf out_amount owner2 player orders owner1 o_seqno n_wins in_amount hash _94
      IF:<{	//  o_amount ecvrf out_amount owner2 player orders owner1 o_seqno n_wins in_amount hash
        3 PUSHINT	//  o_amount ecvrf out_amount owner2 player orders owner1 o_seqno n_wins in_amount hash _96=3
        NOW	//  o_amount ecvrf out_amount owner2 player orders owner1 o_seqno n_wins in_amount hash _96=3 _97
        s5 PUSH
        s13 s3 PUXC
        s0 s10 XCHG	//  o_amount ecvrf out_amount owner2 hash orders owner1 o_seqno n_wins in_amount o_seqno _96=3 _97 o_amount player
        pack_order INLINECALLDICT	//  o_amount ecvrf out_amount owner2 hash orders owner1 o_seqno n_wins in_amount order
        s0 s3 s5 XCPUXC
        64 PUSHINT	//  o_amount ecvrf out_amount owner2 hash in_amount owner1 o_seqno n_wins order o_seqno orders _100=64
        DICTUSETB	//  o_amount ecvrf out_amount owner2 hash in_amount owner1 o_seqno n_wins orders
        s4 s9 XCPU	//  o_amount ecvrf out_amount owner2 hash orders owner1 o_seqno n_wins in_amount o_amount
        ADD	//  o_amount ecvrf out_amount owner2 hash orders owner1 o_seqno n_wins in_amount
        s9 PUSH
        3000000000 PUSHINT	//  o_amount ecvrf out_amount owner2 hash orders owner1 o_seqno n_wins in_amount o_amount _103=3000000000
        GREATER	//  o_amount ecvrf out_amount owner2 hash orders owner1 o_seqno n_wins in_amount _104
        IF:<{	//  o_amount ecvrf out_amount owner2 hash orders owner1 o_seqno n_wins in_amount
          s9 PUSH
          6 PUSHINT	//  o_amount ecvrf out_amount owner2 hash orders owner1 o_seqno n_wins in_amount o_amount _105=6
          DIV	//  o_amount ecvrf out_amount owner2 hash orders owner1 o_seqno n_wins in_amount _106
          s4 s(-1) PUXC
          3 PUSHINT	//  o_amount ecvrf out_amount owner2 hash orders owner1 o_seqno n_wins in_amount owner1 _106 _107=3
          send_tons INLINECALLDICT
          s0 s9 XCHG
          6 PUSHINT	//  in_amount ecvrf out_amount owner2 hash orders owner1 o_seqno n_wins o_amount _109=6
          DIV	//  in_amount ecvrf out_amount owner2 hash orders owner1 o_seqno n_wins _110
          s6 s(-1) PUXC
          3 PUSHINT	//  in_amount ecvrf out_amount owner2 hash orders owner1 o_seqno n_wins owner2 _110 _111=3
          send_tons INLINECALLDICT
        }>ELSE<{
          s9 POP	//  in_amount ecvrf out_amount owner2 hash orders owner1 o_seqno n_wins
        }>
      }>ELSE<{	//  o_amount ecvrf out_amount owner2 player orders owner1 o_seqno n_wins in_amount hash
        s3 PUSH
        2 PUSHINT
        NOW
        s13 s9 PUSH2	//  o_amount ecvrf out_amount owner2 player orders owner1 o_seqno n_wins in_amount hash o_seqno _114=2 _115 o_amount player
        pack_order INLINECALLDICT	//  o_amount ecvrf out_amount owner2 player orders owner1 o_seqno n_wins in_amount hash order
        s0 s4 s6 XCPUXC
        64 PUSHINT	//  o_amount ecvrf out_amount owner2 player hash owner1 o_seqno n_wins in_amount order o_seqno orders _118=64
        DICTUSETB	//  o_amount ecvrf out_amount owner2 player hash owner1 o_seqno n_wins in_amount orders
        s1 s10 XCPU	//  o_amount ecvrf out_amount owner2 player hash owner1 o_seqno n_wins orders in_amount o_amount
        ADD	//  o_amount ecvrf out_amount owner2 player hash owner1 o_seqno n_wins orders in_amount
        s10 PUSH	//  o_amount ecvrf out_amount owner2 player hash owner1 o_seqno n_wins orders in_amount o_amount
        1 LSHIFT#	//  o_amount ecvrf out_amount owner2 player hash owner1 o_seqno n_wins orders in_amount _122
        s1 s9 XCHG	//  o_amount ecvrf in_amount owner2 player hash owner1 o_seqno n_wins orders out_amount _122
        ADD	//  o_amount ecvrf in_amount owner2 player hash owner1 o_seqno n_wins orders out_amount
        s0 s2 XCHG	//  o_amount ecvrf in_amount owner2 player hash owner1 o_seqno out_amount orders n_wins
        INC	//  o_amount ecvrf in_amount owner2 player hash owner1 o_seqno out_amount orders n_wins
        s0 s10 XCHG	//  n_wins ecvrf in_amount owner2 player hash owner1 o_seqno out_amount orders o_amount
        1 LSHIFT#	//  n_wins ecvrf in_amount owner2 player hash owner1 o_seqno out_amount orders _127
        s1 s6 XCHG
        3 PUSHINT	//  n_wins ecvrf in_amount owner2 orders hash owner1 o_seqno out_amount player _127 _128=3
        send_tons INLINECALLDICT
        s0 s6 XCHG
        s0 s8 XCHG
        s3 s4 XCHG	//  in_amount ecvrf out_amount owner2 hash orders owner1 o_seqno n_wins
      }>
      s3 s1 XCPU	//  in_amount ecvrf out_amount owner2 hash n_wins owner1 o_seqno orders o_seqno
      remove_old_orders CALLDICT	//  in_amount ecvrf out_amount owner2 hash n_wins owner1 o_seqno orders
      SWAP	//  in_amount ecvrf out_amount owner2 hash n_wins owner1 orders o_seqno
      INC	//  in_amount ecvrf out_amount owner2 hash n_wins owner1 orders o_seqno
      s0 s8 XCHG
      s3 s7 XCHG
      s0 s6 XCHG
      s5 s1 s5 XCHG3
      s3 s3 XCHG2	//  o_seqno n_wins in_amount out_amount hash owner1 owner2 ecvrf orders
      pack_state INLINECALLDICT	//  _133
      c4 POP
    }>
    0 PUSHINT	//  _135=0
    rand_updated SETGLOB
  }>
  get_order_seqno PROC:<{
    // 
    unpack_state INLINECALLDICT	//  _12 _13 _14 _15 _16
    4 BLKDROP	//  stats
    unpack_stats INLINECALLDICT	//  _17 _18 _19 _20 _21
    4 BLKDROP	//  o_seqno
  }>
  get_number_of_wins PROC:<{
    // 
    unpack_state INLINECALLDICT	//  _12 _13 _14 _15 _16
    4 BLKDROP	//  stats
    unpack_stats INLINECALLDICT	//  _17 _18 _19 _20 _21
    s3 s4 XCHG
    4 BLKDROP	//  n_wins
  }>
  get_incoming_amount PROC:<{
    // 
    unpack_state INLINECALLDICT	//  _12 _13 _14 _15 _16
    4 BLKDROP	//  stats
    unpack_stats INLINECALLDICT	//  _17 _18 _19 _20 _21
    s2 s4 XCHG
    4 BLKDROP	//  in_amount
  }>
  get_outgoing_amount PROC:<{
    // 
    unpack_state INLINECALLDICT	//  _12 _13 _14 _15 _16
    4 BLKDROP	//  stats
    unpack_stats INLINECALLDICT	//  _17 _18 _19 _20 _21
    s1 s4 XCHG
    4 BLKDROP	//  out_amount
  }>
  get_orders PROC:<{
    // 
    unpack_state INLINECALLDICT	//  _26 _27 _28 _29 _30
    s3 s4 XCHG
    4 BLKDROP	//  orders
    31 PUSHPOW2DEC	//  orders cursor=2147483647
    PUSHNULL	//  orders cursor=2147483647 l
    UNTIL:<{
      s1 s2 XCPU
      64 PUSHINT	//  orders l cursor orders _12=64
      DICTUGETPREV
      NULLSWAPIFNOT2	//  orders l order cursor f
      DUP	//  orders l order cursor f f
      IF:<{	//  orders l order cursor f
        s0 s2 XCHG	//  orders l f cursor order
        unpack_order INLINECALLDICT	//  orders l f cursor id status timestamp amount address
        REWRITESTDADDR	//  orders l f cursor id status timestamp amount wc addr_hash
        6 TUPLE	//  orders l f cursor _23
        s0 s3 XCHG2	//  orders cursor f _23 l
        CONS	//  orders cursor f l
        s0 s2 XCHG	//  orders l f cursor
      }>ELSE<{
        s2 POP	//  orders l f cursor
      }>
      SWAP	//  orders l cursor f
      NOT	//  orders l cursor _25
      s1 s2 XCHG	//  orders cursor l _25
    }>	//  orders cursor l
    2 1 BLKDROP2	//  l
  }>
  get_pubkey PROC:<{
    // 
    unpack_state INLINECALLDICT	//  _12 _13 _14 _15 _16
    4 BLKDROP	//  stats
    unpack_stats INLINECALLDICT	//  _17 _18 _19 _20 _21
    4 1 BLKDROP2	//  hash
  }>
  balance PROC:<{
    // 
    BALANCE
    FIRST	//  _0
  }>
  get_random PROC:<{
    // 
    rand_no GETGLOB	//  _0
  }>
}END>c

boc>B "build/boc/lottery.boc" B>file