"Asm.fif" include
// automatically generated from `/Users/prajjawalkhandelwal/Library/Application Support/toncli/func-libs/error_codes.func` `/Users/prajjawalkhandelwal/Library/Application Support/toncli/func-libs/math.func` `/Users/prajjawalkhandelwal/Library/Application Support/toncli/func-libs/stdlib.func` `/Users/prajjawalkhandelwal/Prajjawal/ton-lottery-ecvrf/func/code.func` 
PROGRAM{
  DECLPROC power
  DECLPROC sqrt
  DECLPROC avg
  DECLPROC exp
  DECLPROC log2
  DECLPROC remove_old_orders
  DECLPROC pack_state
  DECLPROC unpack_state
  DECLPROC unpack_stats
  DECLPROC pack_order
  DECLPROC unpack_order
  DECLPROC send_tons
  DECLPROC recv_internal
  113333 DECLMETHOD get_order_seqno
  80328 DECLMETHOD get_number_of_wins
  109088 DECLMETHOD get_incoming_amount
  113619 DECLMETHOD get_outgoing_amount
  67442 DECLMETHOD get_orders
  112663 DECLMETHOD get_pubkey
  104128 DECLMETHOD balance
  90230 DECLMETHOD get_random
  power PROCREF:<{
    //  x exponent
    OVER	//  x exponent x
    0 EQINT	//  x exponent _3
    IFJMP:<{	//  x exponent
      2DROP	// 
      0 PUSHINT	//  _4=0
    }>	//  x exponent
    DUP	//  x exponent exponent
    0 EQINT	//  x exponent _6
    IFJMP:<{	//  x exponent
      2DROP	// 
      1 PUSHINT	//  _7=1
    }>	//  x exponent
    OVER	//  x counter result
    WHILE:<{
      OVER	//  x counter result counter
      1 GTINT	//  x counter result _11
    }>DO<{	//  x counter result
      s2 PUSH	//  x counter result x
      MUL	//  x counter result
      SWAP	//  x result counter
      DEC	//  x result counter
      SWAP	//  x counter result
    }>	//  x counter result
    2 1 BLKDROP2	//  result
  }>
  sqrt PROCREF:<{
    //  x
    DUP	//  x x
    0 EQINT	//  x _2
    IFJMP:<{	//  x
      DROP	// 
      0 PUSHINT	//  _3=0
    }>	//  x
    DUP	//  x x
    4 LESSINT	//  x _5
    IFJMP:<{	//  x
      DROP	// 
      1 PUSHINT	//  _6=1
    }>	//  x
    DUP	//  x x
    INC	//  x _9
    1 RSHIFT#	//  x z
    OVER	//  x z y
    WHILE:<{
      2DUP	//  x z y z y
      LESS	//  x z y _13
    }>DO<{	//  x z y
      DROP	//  x z
      s0 s1 s0 PUSH3	//  x z y x z
      DIV	//  x z y _14
      ROT	//  x y _14 z
      ADD	//  x y _15
      1 RSHIFT#	//  x y z
      SWAP	//  x z y
    }>	//  x z y
    2 1 BLKDROP2	//  y
  }>
  avg PROCREF:<{
    //  x y
    ADD	//  _2
    1 RSHIFT#	//  _4
  }>
  exp PROCREF:<{
    //  x
    DUP	//  x x
    -1 GTINT	//  x _2
    IF:<{	//  x
      POW2	//  _3
    }>ELSE<{	//  x
      1 PUSHINT	//  x _6=1
      SWAP	//  _6=1 x
      NEGATE	//  _6=1 _8
      RSHIFT	//  _3
    }>
  }>
  log2 PROCREF:<{
    //  x
    0 PUSHINT	//  x n=0
    7 PUSHPOW2	//  x n=0 _3=128
    exp INLINECALLDICT	//  x n=0 _4
    s2 s(-1) PUXC	//  x n=0 x _4
    GEQ	//  x n=0 _5
    IF:<{	//  x n=0
      DROP	//  x
      128 RSHIFT#	//  x
      7 PUSHPOW2	//  x n
    }>	//  x n
    64 PUSHINT	//  x n _10=64
    exp INLINECALLDICT	//  x n _11
    s2 s(-1) PUXC	//  x n x _11
    GEQ	//  x n _12
    IF:<{	//  x n
      SWAP	//  n x
      64 RSHIFT#	//  n x
      SWAP	//  x n
      64 ADDCONST	//  x n
    }>	//  x n
    32 PUSHINT	//  x n _17=32
    exp INLINECALLDICT	//  x n _18
    s2 s(-1) PUXC	//  x n x _18
    GEQ	//  x n _19
    IF:<{	//  x n
      SWAP	//  n x
      32 RSHIFT#	//  n x
      SWAP	//  x n
      32 ADDCONST	//  x n
    }>	//  x n
    16 PUSHINT	//  x n _24=16
    exp INLINECALLDICT	//  x n _25
    s2 s(-1) PUXC	//  x n x _25
    GEQ	//  x n _26
    IF:<{	//  x n
      SWAP	//  n x
      16 RSHIFT#	//  n x
      SWAP	//  x n
      16 ADDCONST	//  x n
    }>	//  x n
    8 PUSHINT	//  x n _31=8
    exp INLINECALLDICT	//  x n _32
    s2 s(-1) PUXC	//  x n x _32
    GEQ	//  x n _33
    IF:<{	//  x n
      SWAP	//  n x
      8 RSHIFT#	//  n x
      SWAP	//  x n
      8 ADDCONST	//  x n
    }>	//  x n
    4 PUSHINT	//  x n _38=4
    exp INLINECALLDICT	//  x n _39
    s2 s(-1) PUXC	//  x n x _39
    GEQ	//  x n _40
    IF:<{	//  x n
      SWAP	//  n x
      4 RSHIFT#	//  n x
      SWAP	//  x n
      4 ADDCONST	//  x n
    }>	//  x n
    2 PUSHINT	//  x n _45=2
    exp INLINECALLDICT	//  x n _46
    s2 s(-1) PUXC	//  x n x _46
    GEQ	//  x n _47
    IF:<{	//  x n
      SWAP	//  n x
      2 RSHIFT#	//  n x
      SWAP	//  x n
      2 ADDCONST	//  x n
    }>	//  x n
    1 PUSHINT	//  x n _52=1
    exp INLINECALLDICT	//  x n _53
    s1 s2 XCHG	//  n x _53
    GEQ	//  n _54
    IF:<{	//  n
      INC	//  n
    }>	//  n
  }>
  remove_old_orders PROC:<{
    //  orders o_seqno
    -20 ADDCONST	//  orders cursor
    UNTIL:<{
      OVER
      64 PUSHINT	//  orders cursor orders _7=64
      DICTUGETPREV
      NULLSWAPIFNOT2	//  orders _14 _13 _15
      s2 POP	//  orders f cursor
      OVER	//  orders f cursor f
      IF:<{	//  orders f cursor
        s0 s2 PUXC
        64 PUSHINT	//  cursor f cursor orders _10=64
        DICTUDELGET
        NULLSWAPIFNOT	//  cursor f _18 _19 _20
        2DROP	//  cursor f orders
        s0 s2 XCHG	//  orders f cursor
      }>	//  orders f cursor
      SWAP	//  orders cursor f
      NOT	//  orders cursor _12
    }>	//  orders cursor
    DROP	//  orders
  }>
  pack_state PROCINLINE:<{
    //  o_seqno n_wins in_amount out_amount hash owner ecvrf rand_no rand_updated orders
    NEWC	//  o_seqno n_wins in_amount out_amount hash owner ecvrf rand_no rand_updated orders _10
    s0 s5 XCHG2	//  o_seqno n_wins in_amount out_amount hash orders ecvrf rand_no rand_updated _10 owner
    STSLICER	//  o_seqno n_wins in_amount out_amount hash orders ecvrf rand_no rand_updated _11
    s0 s3 XCHG2	//  o_seqno n_wins in_amount out_amount hash orders rand_updated rand_no _11 ecvrf
    STSLICER	//  o_seqno n_wins in_amount out_amount hash orders rand_updated rand_no _12
    ENDC	//  o_seqno n_wins in_amount out_amount hash orders rand_updated rand_no _13
    s0 s8 XCHG
    NEWC	//  _13 n_wins in_amount out_amount hash orders rand_updated rand_no o_seqno _14
    64 STU	//  _13 n_wins in_amount out_amount hash orders rand_updated rand_no _16
    s1 s7 XCHG	//  _13 rand_no in_amount out_amount hash orders rand_updated n_wins _16
    64 STU	//  _13 rand_no in_amount out_amount hash orders rand_updated _18
    s1 s5 XCHG	//  _13 rand_no rand_updated out_amount hash orders in_amount _18
    256 STU	//  _13 rand_no rand_updated out_amount hash orders _20
    s1 s3 XCHG	//  _13 rand_no rand_updated orders hash out_amount _20
    256 STU	//  _13 rand_no rand_updated orders hash _22
    256 STU	//  _13 rand_no rand_updated orders _24
    s1 s3 XCHG	//  _13 orders rand_updated rand_no _24
    64 STU	//  _13 orders rand_updated _26
    32 STU	//  _13 orders _28
    STDICT	//  _13 _29
    STREF	//  _30
    ENDC	//  _31
  }>
  unpack_state PROCINLINE:<{
    // 
    c4 PUSH	//  _1
    CTOS	//  ds
    992 PUSHINT	//  ds _9
    LDSLICEX	//  stats ds
    LDDICT	//  stats orders ds
    PLDREF	//  stats orders _15
    CTOS	//  stats orders adrs
    LDMSGADDR	//  stats orders _18 adrs
    LDMSGADDR	//  stats orders _18 _33 _32
    DROP	//  unpacked unpacked unpacked unpacked
  }>
  unpack_stats PROCINLINE:<{
    //  stats
    64 LDU	//  _2 stats
    64 LDU	//  _2 _5 stats
    256 LDU	//  _2 _5 _8 stats
    256 LDU	//  _2 _5 _8 _11 stats
    256 LDU	//  _2 _5 _8 _11 _14 stats
    64 LDU	//  _2 _5 _8 _11 _14 _17 stats
    32 LDU	//  _2 _5 _8 _11 _14 _17 _43 _42
    DROP	//  unpacked unpacked unpacked unpacked unpacked unpacked unpacked
  }>
  pack_order PROCINLINE:<{
    //  id status timestamp amount address
    s0 s4 XCHG
    NEWC	//  address status timestamp amount id _5
    64 STU	//  address status timestamp amount _7
    s1 s3 XCHG	//  address amount timestamp status _7
    4 STU	//  address amount timestamp _9
    64 STU	//  address amount _11
    SWAP	//  address _11 amount
    STVARUINT16	//  address _12
    SWAP	//  _12 address
    STSLICER	//  _13
  }>
  unpack_order PROCREF:<{
    //  order
    64 LDU	//  _1 order
    4 LDU	//  _1 _4 order
    64 LDU	//  _1 _4 _7 order
    LDVARUINT16	//  _1 _4 _7 _10 order
    LDMSGADDR	//  _1 _4 _7 _10 _23 _22
    DROP	//  _1 _4 _7 _10 _12
  }>
  send_tons PROCINLINE:<{
    //  address amount mode
    0 PUSHINT	//  address amount mode _4=0
    24 PUSHINT	//  address amount mode _4=0 _5=24
    NEWC	//  address amount mode _4=0 _5=24 _6
    6 STU	//  address amount mode _4=0 _8
    s0 s4 XCHG2	//  _4=0 amount mode _8 address
    STSLICER	//  _4=0 amount mode _9
    ROT	//  _4=0 mode _9 amount
    STVARUINT16	//  _4=0 mode _10
    s1 s2 XCHG	//  mode _4=0 _10
    107 STU	//  mode msg
    ENDC	//  mode _25
    SWAP	//  _25 mode
    SENDRAWMSG
  }>
  recv_internal PROC:<{
    //  msg_value in_msg_full in_msg_body
    SWAP	//  msg_value in_msg_body in_msg_full
    CTOS	//  msg_value in_msg_body cs
    DUP	//  msg_value in_msg_body cs cs
    HASHSU	//  msg_value in_msg_body cs msg_hash
    SWAP	//  msg_value in_msg_body msg_hash cs
    4 LDU	//  msg_value in_msg_body msg_hash flags cs
    SWAP
    1 PUSHINT	//  msg_value in_msg_body msg_hash cs flags _11=1
    AND	//  msg_value in_msg_body msg_hash cs _12
    IFJMP:<{	//  msg_value in_msg_body msg_hash cs
      4 BLKDROP	// 
    }>	//  msg_value in_msg_body msg_hash cs
    LDMSGADDR	//  msg_value in_msg_body msg_hash _175 _174
    DROP	//  msg_value in_msg_body msg_hash sender
    unpack_state INLINECALLDICT	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf
    2873903193 PUSHINT	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf _21=2873903193
    0 PUSHINT	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf _21=2873903193 _22=0
    24 PUSHINT	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf _21=2873903193 _22=0 _23=24
    NEWC	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf _21=2873903193 _22=0 _23=24 _24
    6 STU	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf _21=2873903193 _22=0 _26
    s3 PUSH	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf _21=2873903193 _22=0 _26 ecvrf
    STSLICER	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf _21=2873903193 _22=0 _27
    OVER	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf _21=2873903193 _22=0 _27 _28=0
    STVARUINT16	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf _21=2873903193 _22=0 _29
    107 STU	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf _21=2873903193 _43
    32 STU	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf _45
    MYADDR	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf _45 _46
    STSLICER	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf _47
    ENDC	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf _48
    1 PUSHINT	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf _48 _49=1
    SENDRAWMSG
    s4 s1 PUSH2	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf sender owner
    SDEQ	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf _51
    IFJMP:<{	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf
      8 BLKDROP	// 
    }>	//  msg_value in_msg_body msg_hash sender stats orders owner ecvrf
    s6 PUSH	//  msg_value msg_body msg_hash sender stats orders owner ecvrf in_msg_body
    32 LDU	//  msg_value msg_body msg_hash sender stats orders owner ecvrf op in_msg_body
    110947496 PUSHINT	//  msg_value msg_body msg_hash sender stats orders owner ecvrf op in_msg_body _57=110947496
    s7 s3 XCPU	//  msg_value msg_body msg_hash _57=110947496 stats orders owner ecvrf op in_msg_body sender ecvrf
    SDEQ	//  msg_value msg_body msg_hash _57=110947496 stats orders owner ecvrf op in_msg_body _58
    s1 s7 XCHG	//  msg_value msg_body msg_hash in_msg_body stats orders owner ecvrf op _57=110947496 _58
    AND	//  msg_value msg_body msg_hash in_msg_body stats orders owner ecvrf op _59
    EQUAL	//  msg_value msg_body msg_hash in_msg_body stats orders owner ecvrf _60
    IFJMP:<{	//  msg_value msg_body msg_hash in_msg_body stats orders owner ecvrf
      s4 POP
      s4 POP
      s5 POP	//  orders msg_body owner ecvrf stats
      s0 s3 XCHG	//  orders stats owner ecvrf msg_body
      256 LDU	//  orders stats owner ecvrf _183 _182
      DROP	//  orders stats owner ecvrf vrfrand
      s0 s3 XCHG	//  orders vrfrand owner ecvrf stats
      unpack_stats INLINECALLDICT	//  orders vrfrand owner ecvrf _184 _185 _186 _187 _188 _189 _190
      2DROP	//  orders vrfrand owner ecvrf o_seqno n_wins in_amount out_amount hash
      s0 s7 XCHG
      10 PUSHINT	//  orders hash owner ecvrf o_seqno n_wins in_amount out_amount vrfrand _73=10
      MOD	//  orders hash owner ecvrf o_seqno n_wins in_amount out_amount rand_no
      s4 s8 XCHG
      s3 s7 XCHG
      s6 s5 s0 XCHG3
      4 ROLL
      1 PUSHINT
      SWAP	//  o_seqno n_wins in_amount out_amount hash owner ecvrf rand_no rand_updated=1 orders
      pack_state INLINECALLDICT	//  _76
      c4 POP
    }>	//  msg_value msg_body msg_hash in_msg_body stats orders owner ecvrf
    s6 POP	//  msg_value ecvrf msg_hash in_msg_body stats orders owner
    s6 PUSH
    999999999 PUSHINT	//  msg_value ecvrf msg_hash in_msg_body stats orders owner msg_value _79=999999999
    GREATER	//  msg_value ecvrf msg_hash in_msg_body stats orders owner _80
    333 THROWIFNOT
    BALANCE
    FIRST	//  msg_value ecvrf msg_hash in_msg_body stats orders owner _83
    s7 PUSH	//  msg_value ecvrf msg_hash in_msg_body stats orders owner _83 msg_value
    1 LSHIFT#	//  msg_value ecvrf msg_hash in_msg_body stats orders owner _83 _85
    1000000000 PUSHINT	//  msg_value ecvrf msg_hash in_msg_body stats orders owner _83 _85 _86=1000000000
    ADD	//  msg_value ecvrf msg_hash in_msg_body stats orders owner _83 _87
    GREATER	//  msg_value ecvrf msg_hash in_msg_body stats orders owner _88
    666 THROWIFNOT
    s0 s3 XCHG	//  msg_value ecvrf msg_hash owner stats orders in_msg_body
    LDMSGADDR	//  msg_value ecvrf msg_hash owner stats orders _92 in_msg_body
    LDVARUINT16	//  msg_value ecvrf msg_hash owner stats orders _92 _194 _193
    DROP	//  msg_value ecvrf msg_hash owner stats orders player o_amount
    BALANCE
    FIRST	//  msg_value ecvrf msg_hash owner stats orders player o_amount _96
    OVER	//  msg_value ecvrf msg_hash owner stats orders player o_amount _96 o_amount
    1 LSHIFT#	//  msg_value ecvrf msg_hash owner stats orders player o_amount _96 _98
    1000000000 PUSHINT	//  msg_value ecvrf msg_hash owner stats orders player o_amount _96 _98 _99=1000000000
    ADD	//  msg_value ecvrf msg_hash owner stats orders player o_amount _96 _100
    LESS	//  msg_value ecvrf msg_hash owner stats orders player o_amount _101
    IF:<{	//  msg_value ecvrf msg_hash owner stats orders player o_amount
      s1 s6 XCHG
      6 BLKDROP	//  msg_value player
      SWAP
      2 PUSHINT	//  player msg_value _102=2
      send_tons INLINECALLDICT
    }>ELSE<{	//  msg_value ecvrf msg_hash owner stats orders player o_amount
      s7 POP	//  o_amount ecvrf msg_hash owner stats orders player
      s0 s2 XCHG	//  o_amount ecvrf msg_hash owner player orders stats
      unpack_stats INLINECALLDICT	//  o_amount ecvrf msg_hash owner player orders o_seqno n_wins in_amount out_amount hash rand_no rand_updated
      NOW	//  o_amount ecvrf msg_hash owner player orders o_seqno n_wins in_amount out_amount hash rand_no rand_updated _112
      LTIME	//  o_amount ecvrf msg_hash owner player orders o_seqno n_wins in_amount out_amount hash rand_no rand_updated _112 _113
      s0 s4 XCHG
      NEWC	//  o_amount ecvrf msg_hash owner player orders o_seqno n_wins in_amount out_amount _113 rand_no rand_updated _112 hash _114
      256 STU	//  o_amount ecvrf msg_hash owner player orders o_seqno n_wins in_amount out_amount _113 rand_no rand_updated _112 _116
      s1 s12 XCHG	//  o_amount ecvrf _112 owner player orders o_seqno n_wins in_amount out_amount _113 rand_no rand_updated msg_hash _116
      256 STU	//  o_amount ecvrf _112 owner player orders o_seqno n_wins in_amount out_amount _113 rand_no rand_updated _118
      s1 s3 XCHG	//  o_amount ecvrf _112 owner player orders o_seqno n_wins in_amount out_amount rand_updated rand_no _113 _118
      64 STU	//  o_amount ecvrf _112 owner player orders o_seqno n_wins in_amount out_amount rand_updated rand_no _120
      s1 s10 XCHG	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount rand_updated _112 _120
      64 STU	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount rand_updated _122
      ENDC	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount rand_updated _123
      HASHCU	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount rand_updated hash
      DUP	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount rand_updated hash hash
      ADDRAND
      OVER	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount rand_updated hash rand_updated
      0 EQINT	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount rand_updated hash _127
      IF:<{	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount rand_updated hash
        s9 POP	//  o_amount ecvrf hash owner player orders o_seqno n_wins in_amount out_amount rand_updated
        10 PUSHINT	//  o_amount ecvrf hash owner player orders o_seqno n_wins in_amount out_amount rand_updated _128=10
        RAND	//  o_amount ecvrf hash owner player orders o_seqno n_wins in_amount out_amount rand_updated rand_no
        s0 s9 XCHG	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount rand_updated hash
      }>	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount rand_updated hash
      4 PUSHINT	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount rand_updated hash _130=4
      s0 s2 XCHG	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount _130=4 hash rand_updated
      1 EQINT	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount _130=4 hash _132
      s1 s2 XCHG	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount hash _130=4 _132
      AND	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount hash _133
      s9 s(-1) PUXC	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount hash rand_no _133
      GEQ	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount hash _134
      IF:<{	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount hash
        3 PUSHINT	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount hash _136=3
        NOW	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount hash _136=3 _137
        s6 PUSH
        s13 s3 PUXC
        s0 s10 XCHG	//  o_amount ecvrf rand_no owner hash orders o_seqno n_wins in_amount out_amount o_seqno _136=3 _137 o_amount player
        pack_order INLINECALLDICT	//  o_amount ecvrf rand_no owner hash orders o_seqno n_wins in_amount out_amount order
        s0 s4 s5 XCPUXC
        64 PUSHINT	//  o_amount ecvrf rand_no owner hash out_amount o_seqno n_wins in_amount order o_seqno orders _140=64
        DICTUSETB	//  o_amount ecvrf rand_no owner hash out_amount o_seqno n_wins in_amount orders
        s1 s9 XCPU	//  o_amount ecvrf rand_no owner hash out_amount o_seqno n_wins orders in_amount o_amount
        ADD	//  o_amount ecvrf rand_no owner hash out_amount o_seqno n_wins orders in_amount
        s9 PUSH
        3000000000 PUSHINT	//  o_amount ecvrf rand_no owner hash out_amount o_seqno n_wins orders in_amount o_amount _143=3000000000
        GREATER	//  o_amount ecvrf rand_no owner hash out_amount o_seqno n_wins orders in_amount _144
        IF:<{	//  o_amount ecvrf rand_no owner hash out_amount o_seqno n_wins orders in_amount
          s0 s9 XCHG
          6 PUSHINT	//  in_amount ecvrf rand_no owner hash out_amount o_seqno n_wins orders o_amount _145=6
          DIV	//  in_amount ecvrf rand_no owner hash out_amount o_seqno n_wins orders _146
          s6 s(-1) PUXC
          3 PUSHINT	//  in_amount ecvrf rand_no owner hash out_amount o_seqno n_wins orders owner _146 _147=3
          send_tons INLINECALLDICT
        }>ELSE<{
          s9 POP	//  in_amount ecvrf rand_no owner hash out_amount o_seqno n_wins orders
        }>
      }>ELSE<{	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount hash
        s4 PUSH
        2 PUSHINT
        NOW
        s13 s9 PUSH2	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount hash o_seqno _150=2 _151 o_amount player
        pack_order INLINECALLDICT	//  o_amount ecvrf rand_no owner player orders o_seqno n_wins in_amount out_amount hash order
        s0 s5 s6 XCPUXC
        64 PUSHINT	//  o_amount ecvrf rand_no owner player hash o_seqno n_wins in_amount out_amount order o_seqno orders _154=64
        DICTUSETB	//  o_amount ecvrf rand_no owner player hash o_seqno n_wins in_amount out_amount orders
        s2 s10 XCPU	//  o_amount ecvrf rand_no owner player hash o_seqno n_wins orders out_amount in_amount o_amount
        ADD	//  o_amount ecvrf rand_no owner player hash o_seqno n_wins orders out_amount in_amount
        s10 PUSH	//  o_amount ecvrf rand_no owner player hash o_seqno n_wins orders out_amount in_amount o_amount
        1 LSHIFT#	//  o_amount ecvrf rand_no owner player hash o_seqno n_wins orders out_amount in_amount _158
        s1 s2 XCHG	//  o_amount ecvrf rand_no owner player hash o_seqno n_wins orders in_amount out_amount _158
        ADD	//  o_amount ecvrf rand_no owner player hash o_seqno n_wins orders in_amount out_amount
        s0 s3 XCHG	//  o_amount ecvrf rand_no owner player hash o_seqno out_amount orders in_amount n_wins
        INC	//  o_amount ecvrf rand_no owner player hash o_seqno out_amount orders in_amount n_wins
        s0 s10 XCHG	//  n_wins ecvrf rand_no owner player hash o_seqno out_amount orders in_amount o_amount
        1 LSHIFT#	//  n_wins ecvrf rand_no owner player hash o_seqno out_amount orders in_amount _163
        s1 s6 XCHG
        3 PUSHINT	//  n_wins ecvrf rand_no owner in_amount hash o_seqno out_amount orders player _163 _164=3
        send_tons INLINECALLDICT
        s4 s8 XCHG
        s1 s3 XCHG
        s1 s4 XCHG	//  in_amount ecvrf rand_no owner hash out_amount o_seqno n_wins orders
      }>
      s2 PUSH	//  in_amount ecvrf rand_no owner hash out_amount o_seqno n_wins orders o_seqno
      remove_old_orders CALLDICT	//  in_amount ecvrf rand_no owner hash out_amount o_seqno n_wins orders
      s0 s2 XCHG	//  in_amount ecvrf rand_no owner hash out_amount orders n_wins o_seqno
      INC	//  in_amount ecvrf rand_no owner hash out_amount orders n_wins o_seqno
      s0 s8 XCHG
      s7 s6 XCHG2
      s3 s5 XCHG
      ROT
      0 PUSHINT
      SWAP	//  o_seqno n_wins in_amount out_amount hash owner ecvrf rand_no rand_updated=0 orders
      pack_state INLINECALLDICT	//  _170
      c4 POP
    }>
  }>
  get_order_seqno PROC:<{
    // 
    unpack_state INLINECALLDICT	//  _13 _14 _15 _16
    3 BLKDROP	//  stats
    unpack_stats INLINECALLDICT	//  _17 _18 _19 _20 _21 _22 _23
    6 BLKDROP	//  o_seqno
  }>
  get_number_of_wins PROC:<{
    // 
    unpack_state INLINECALLDICT	//  _13 _14 _15 _16
    3 BLKDROP	//  stats
    unpack_stats INLINECALLDICT	//  _17 _18 _19 _20 _21 _22 _23
    s5 s6 XCHG
    6 BLKDROP	//  n_wins
  }>
  get_incoming_amount PROC:<{
    // 
    unpack_state INLINECALLDICT	//  _13 _14 _15 _16
    3 BLKDROP	//  stats
    unpack_stats INLINECALLDICT	//  _17 _18 _19 _20 _21 _22 _23
    s4 s6 XCHG
    6 BLKDROP	//  in_amount
  }>
  get_outgoing_amount PROC:<{
    // 
    unpack_state INLINECALLDICT	//  _13 _14 _15 _16
    3 BLKDROP	//  stats
    unpack_stats INLINECALLDICT	//  _17 _18 _19 _20 _21 _22 _23
    s3 s6 XCHG
    6 BLKDROP	//  out_amount
  }>
  get_orders PROC:<{
    // 
    unpack_state INLINECALLDICT	//  _25 _26 _27 _28
    s2 s3 XCHG
    3 BLKDROP	//  orders
    31 PUSHPOW2DEC	//  orders cursor=2147483647
    PUSHNULL	//  orders cursor=2147483647 l
    UNTIL:<{
      s1 s2 XCPU
      64 PUSHINT	//  orders l cursor orders _11=64
      DICTUGETPREV
      NULLSWAPIFNOT2	//  orders l order cursor f
      DUP	//  orders l order cursor f f
      IF:<{	//  orders l order cursor f
        s0 s2 XCHG	//  orders l f cursor order
        unpack_order INLINECALLDICT	//  orders l f cursor id status timestamp amount address
        REWRITESTDADDR	//  orders l f cursor id status timestamp amount wc addr_hash
        6 TUPLE	//  orders l f cursor _22
        s0 s3 XCHG2	//  orders cursor f _22 l
        CONS	//  orders cursor f l
        s0 s2 XCHG	//  orders l f cursor
      }>ELSE<{
        s2 POP	//  orders l f cursor
      }>
      SWAP	//  orders l cursor f
      NOT	//  orders l cursor _24
      s1 s2 XCHG	//  orders cursor l _24
    }>	//  orders cursor l
    2 1 BLKDROP2	//  l
  }>
  get_pubkey PROC:<{
    // 
    unpack_state INLINECALLDICT	//  _13 _14 _15 _16
    3 BLKDROP	//  stats
    unpack_stats INLINECALLDICT	//  _17 _18 _19 _20 _21 _22 _23
    s2 s6 XCHG
    6 BLKDROP	//  hash
  }>
  balance PROC:<{
    // 
    BALANCE
    FIRST	//  _0
  }>
  get_random PROC:<{
    // 
    unpack_state INLINECALLDICT	//  _13 _14 _15 _16
    3 BLKDROP	//  stats
    unpack_stats INLINECALLDICT	//  _17 _18 _19 _20 _21 _22 _23
    s1 s6 XCHG
    6 BLKDROP	//  random_no
  }>
}END>c

boc>B "build/boc/lottery.boc" B>file